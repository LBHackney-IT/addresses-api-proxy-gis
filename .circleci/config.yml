version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.0.0
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  node-executor:
    docker:
      - image: circleci/node:14.15.5-browsers
  docker-python:
    docker:
      - image: circleci/python:3.7

references:
  workspace_root: &workspace_root '~'
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

jobs:
  install-dependencies:
    executor: node-executor
    steps:
      - *attach_workspace
      - checkout
      - restore_cache:
      #     key: dependency-cache-{{ checksum "yarn.lock" }}
            key: dependency-cache--{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm install
      - save_cache:
          # key: dependency-cache-{{ checksum "yarn.lock" }}
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
            # - ./.next/cache
            - /home/circleci/.cache
      - persist_to_workspace:
          root: *workspace_root
          paths: .

  # tests:
  #   executor: node-executor
  #   steps:
  #     - *attach_workspace
  #     - run:
  #         name: Run Linter
  #         command: yarn lint
  #     - run:
  #         name: Run Tests
  #         command: yarn test:unit

  # e2e:
  #   executor: node-executor
  #   steps:
  #     - *attach_workspace
  #     - run:
  #         name: Run E2E With Lighthouse Audit
  #         command: yarn e2e:audit
      # - store_artifacts:
      #     path: cypress/screenshots
      # - store_artifacts:
      #     path: cypress/videos
      # - store_artifacts:
      #     path: cypress/reports

  build-deploy-staging:
    executor: node-executor
    steps:
      - *attach_workspace
      - run:
          name: build
          command: npm install
      - run:
          name: serverless install
          command: sudo npm i -g serverless
      - run:
          name: deploy
          command: sls deploy --stage staging
          # command: npm install && npm run build && sls deploy --stage environment

  build-deploy-production:
    executor: aws-cli/default
    steps:
      - *attach_workspace
      - run:
          name: deploy
          # command: npm install parcel-bundler --save-dev && npm run build && sudo npm i -g serverless && sls deploy --stage production
          command: npm install && sls deploy --stage production

  assume-role-staging:
    executor: docker-python
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: $AWS_ACCOUNT_STAGING
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

  assume-role-production:
    executor: docker-python
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: $AWS_ACCOUNT_PRODUCTION
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

workflows:
  version: 2
  continuous-delivery:
    jobs:
      - install-dependencies:
          filters:
            branches:
              only:
                - staging
                - master
      # - tests:
      #     requires:
      #       - install-dependencies
      # - e2e:
      #     requires:
      #       - install-dependencies
      - assume-role-staging:
          context: api-assume-role-staging-context
          requires:
            - install-dependencies
          #   - e2e
          filters:
            branches:
              only: staging
      - build-deploy-staging:
          requires:
            - assume-role-staging
          filters:
            branches:
              only: staging
      - permit-deploy-production:
          type: approval
          requires:
            - build-deploy-staging
          filters:
            branches:
              only: master
      - assume-role-production:
          context: api-assume-role-production-context
          requires:
            - permit-deploy-production
          filters:
            branches:
              only: master
      - build-deploy-production:
          requires:
            - assume-role-production
          filters:
            branches:
              only: master
